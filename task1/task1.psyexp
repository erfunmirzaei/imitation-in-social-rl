<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.1.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['exp_id'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'session': '1', 'exp_id': '', 'age': '', 'sex(M or F)': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="True" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Social Reinforcement Learning" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="feedback">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="thisExp.addData(&quot;reward_a&quot;, p_reward[&quot;a&quot;]);&amp;#10;thisExp.addData(&quot;reward_d&quot;, p_reward[&quot;d&quot;]);&amp;#10;if ((trial_type === &quot;Private&quot;)) {&amp;#10;    if ((key_resp.keys[0] === &quot;a&quot;)) {&amp;#10;        reward = reward_a.get_reward().toString();&amp;#10;    } else {&amp;#10;        reward = reward_d.get_reward().toString();&amp;#10;    }&amp;#10;} else {&amp;#10;    reward = &quot;?&quot;;&amp;#10;}&amp;#10;thisExp.addData(&quot;reward&quot;, reward);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# store it in the data:&amp;#10;thisExp.addData('reward_a', p_reward['a'])&amp;#10;thisExp.addData('reward_d', p_reward['d'])&amp;#10;if trial_type == &quot;Private&quot;:&amp;#10;    if key_resp.keys[0] == 'a':&amp;#10;        reward = str(reward_a.get_reward())&amp;#10;    else:&amp;#10;        reward = str(reward_d.get_reward()) &amp;#10;else:&amp;#10;    reward = &quot;?&quot;&amp;#10;&amp;#10;thisExp.addData('reward', reward)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every frame" val="$image_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="image" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, 0.1)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.4, 0.4)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, -0.2)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$&quot;Rew:&quot; + reward&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <PolygonComponent name="line_2">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="fillColor" updates="constant" val="black" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="black" valType="color"/>
        <Param name="lineWidth" updates="constant" val="2" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="line_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="90" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="constant" val="(0.7, 0.7)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="text_6">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$identity" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="Start">
      <TextboxComponent name="textbox">
        <Param name="anchor" updates="constant" val="center" valType="str"/>
        <Param name="autoLog" updates="constant" val="True" valType="bool"/>
        <Param name="bold" updates="constant" val="False" valType="bool"/>
        <Param name="borderColor" updates="constant" val="None" valType="color"/>
        <Param name="borderWidth" updates="constant" val="2" valType="num"/>
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="editable" updates="constant" val="False" valType="bool"/>
        <Param name="fillColor" updates="constant" val="None" valType="color"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="italic" updates="constant" val="False" valType="bool"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="lineSpacing" updates="constant" val="1.0" valType="num"/>
        <Param name="name" updates="None" val="textbox" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="padding" updates="constant" val="" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.35)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.75,0.3)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="frame N" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (frames)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Hi. Thanks for participating in this experiment. &amp;#10;In this experiment, there is 2 kind of trials: Observational, and Private. In Observational trial, an abstract picture of the demonstrator is shown on the left side of the screen and then you can see that the domonstrator's action but not reward. In private trials,an abstract picture of You is shown on the right side of the screen and then you should choose between action a or d with pressing the &quot;a&quot; or &quot;d&quot; button on the keyboard after seeing &quot;Go!&quot; signal. Therefore you can see the reward correspond to your action. The goal of experiment is to get more rewards. &amp;#10;The more rewards you get, you earn more money(actually I'll pay to you after creating my owncrypto token. My pleasure :D )  &amp;#10;It can take your time for about 10 mins(100 trials) &amp;#10;Whenever you read the description, you can press the &quot;f&quot; to start the experiment. &amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </TextboxComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'enter','f'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Private_Observational_trial">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="from random import randint,sample,choice,choices&amp;#10;trial = 0 &amp;#10;&amp;#10;#block_types = [&quot;Social&quot;, &quot;Private&quot;]&amp;#10;#learning_types = [&quot;PL&quot;,&quot;SD&quot;,&quot;UD&quot;]&amp;#10;#trial_types = [&quot;Observational&quot;,&quot;Private&quot;]&amp;#10;def create_trials(state):&amp;#10;    x = [&quot;Observational&quot;,&quot;Private&quot;] * 20&amp;#10;    if state == 1:&amp;#10;        block_type = [&quot;Private&quot;] * 20 + [&quot;Social&quot;] * 80&amp;#10;        learning_type = [&quot;PL&quot;] * 20 + [&quot;UD&quot;] * 40 + [&quot;SD&quot;] * 40&amp;#10;        trials_type = [&quot;Private&quot;] * 20 + sample(x, k=len(x)) + sample(x, k=len(x))&amp;#10;    if state == 2:&amp;#10;        block_type = [&quot;Private&quot;] * 20 + [&quot;Social&quot;] * 80&amp;#10;        learning_type = [&quot;PL&quot;] * 20 + [&quot;SD&quot;] * 40 + [&quot;UD&quot;] * 40&amp;#10;        trials_type = [&quot;Private&quot;] * 20 + sample(x, k=len(x)) + sample(x, k=len(x))&amp;#10;    if state == 3:&amp;#10;        block_type = [&quot;Social&quot;] * 40 + [&quot;Private&quot;] * 20 + [&quot;Social&quot;] * 40&amp;#10;        learning_type = [&quot;UD&quot;] * 40 + [&quot;PL&quot;] * 20 + [&quot;SD&quot;] * 40&amp;#10;        trials_type = sample(x, k=len(x)) + [&quot;Private&quot;] * 20 + sample(x, k=len(x))&amp;#10;    if state == 4:&amp;#10;        block_type = [&quot;Social&quot;] * 40 + [&quot;Private&quot;] * 20 + [&quot;Social&quot;] * 40&amp;#10;        learning_type = [&quot;SD&quot;] * 40 + [&quot;PL&quot;] * 20 + [&quot;UD&quot;] * 40&amp;#10;        trials_type = sample(x, k=len(x)) + [&quot;Private&quot;] * 20 + sample(x, k=len(x))&amp;#10;    if state == 5:&amp;#10;        block_type =   [&quot;Social&quot;] * 80 + [&quot;Private&quot;] * 20 &amp;#10;        learning_type = [&quot;UD&quot;] * 40 + [&quot;SD&quot;] * 40 + [&quot;PL&quot;] * 20 &amp;#10;        trials_type = sample(x, k=len(x)) + sample(x, k=len(x)) + [&quot;Private&quot;] * 20 &amp;#10;    if state == 6:&amp;#10;        block_type =   [&quot;Social&quot;] * 80 + [&quot;Private&quot;] * 20 &amp;#10;        learning_type = [&quot;SD&quot;] * 40 + [&quot;UD&quot;] + [&quot;PL&quot;] * 20  &amp;#10;        trials_type = sample(x, k=len(x)) + sample(x, k=len(x)) + [&quot;Private&quot;] * 20 &amp;#10;    return block_type , learning_type, trials_type &amp;#10;# There is 6 states in each session:&amp;#10;# State 1: P, UD , SD&amp;#10;# State 2: P, SD , UD&amp;#10;# State 3: UD , P, SD&amp;#10;# State 4: SD , P, UD&amp;#10;# State 5: UD, SD , P&amp;#10;# State 6: SD, UD , P&amp;#10;state = randint(1,6)&amp;#10;block_type, learning_type, trials_type = create_trials(state)&amp;#10;&amp;#10;actions = ['a', 'd']&amp;#10;rewards = [1,-1] &amp;#10;p1 = 0.7&amp;#10;p2 = 0.3&amp;#10;p_reward= {'a' : choice([p1,p2])}&amp;#10;p_reward['d'] = 1 - p_reward['a']&amp;#10;probs_a = [p_reward['a'],1 - p_reward['a']]&amp;#10;probs_d = [p_reward['d'],1 - p_reward['d']]&amp;#10;if p_reward['a'] &gt; p_reward['d']:&amp;#10;    best_action = 'a'&amp;#10;    worst_action = 'd'&amp;#10;else :&amp;#10;    best_action = 'd'&amp;#10;    worst_action = 'a'&amp;#10;class MultinomialReward():&amp;#10;    def __init__(self, rewards, probs):&amp;#10;        self.rewards = rewards&amp;#10;        self.probs = probs&amp;#10;&amp;#10;    def get_reward(self):&amp;#10;        return choices(self.rewards, weights = self.probs, k = 1)[0]&amp;#10;&amp;#10;reward_a = MultinomialReward(rewards,probs_a)&amp;#10;reward_d = MultinomialReward(rewards,probs_d)&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="import {choice, choices, randint, sample} from 'random';&amp;#10;var actions, best_action, block_type, learning_type, p1, p2, p_reward, probs_a, probs_d, reward_a, reward_d, rewards, state, trial, trials_type, worst_action;&amp;#10;trial = 0;&amp;#10;function create_trials(state) {&amp;#10;    var x;&amp;#10;    x = ([&quot;Observational&quot;, &quot;Private&quot;] * 20);&amp;#10;    if ((state === 1)) {&amp;#10;        block_type = (([&quot;Private&quot;] * 20) + ([&quot;Social&quot;] * 80));&amp;#10;        learning_type = ((([&quot;PL&quot;] * 20) + ([&quot;UD&quot;] * 40)) + ([&quot;SD&quot;] * 40));&amp;#10;        trials_type = ((([&quot;Private&quot;] * 20) + sample(x, {&quot;k&quot;: x.length})) + sample(x, {&quot;k&quot;: x.length}));&amp;#10;    }&amp;#10;    if ((state === 2)) {&amp;#10;        block_type = (([&quot;Private&quot;] * 20) + ([&quot;Social&quot;] * 80));&amp;#10;        learning_type = ((([&quot;PL&quot;] * 20) + ([&quot;SD&quot;] * 40)) + ([&quot;UD&quot;] * 40));&amp;#10;        trials_type = ((([&quot;Private&quot;] * 20) + sample(x, {&quot;k&quot;: x.length})) + sample(x, {&quot;k&quot;: x.length}));&amp;#10;    }&amp;#10;    if ((state === 3)) {&amp;#10;        block_type = ((([&quot;Social&quot;] * 40) + ([&quot;Private&quot;] * 20)) + ([&quot;Social&quot;] * 40));&amp;#10;        learning_type = ((([&quot;UD&quot;] * 40) + ([&quot;PL&quot;] * 20)) + ([&quot;SD&quot;] * 40));&amp;#10;        trials_type = ((sample(x, {&quot;k&quot;: x.length}) + ([&quot;Private&quot;] * 20)) + sample(x, {&quot;k&quot;: x.length}));&amp;#10;    }&amp;#10;    if ((state === 4)) {&amp;#10;        block_type = ((([&quot;Social&quot;] * 40) + ([&quot;Private&quot;] * 20)) + ([&quot;Social&quot;] * 40));&amp;#10;        learning_type = ((([&quot;SD&quot;] * 40) + ([&quot;PL&quot;] * 20)) + ([&quot;UD&quot;] * 40));&amp;#10;        trials_type = ((sample(x, {&quot;k&quot;: x.length}) + ([&quot;Private&quot;] * 20)) + sample(x, {&quot;k&quot;: x.length}));&amp;#10;    }&amp;#10;    if ((state === 5)) {&amp;#10;        block_type = (([&quot;Social&quot;] * 80) + ([&quot;Private&quot;] * 20));&amp;#10;        learning_type = ((([&quot;UD&quot;] * 40) + ([&quot;SD&quot;] * 40)) + ([&quot;PL&quot;] * 20));&amp;#10;        trials_type = ((sample(x, {&quot;k&quot;: x.length}) + sample(x, {&quot;k&quot;: x.length})) + ([&quot;Private&quot;] * 20));&amp;#10;    }&amp;#10;    if ((state === 6)) {&amp;#10;        block_type = (([&quot;Social&quot;] * 80) + ([&quot;Private&quot;] * 20));&amp;#10;        learning_type = ((([&quot;SD&quot;] * 40) + [&quot;UD&quot;]) + ([&quot;PL&quot;] * 20));&amp;#10;        trials_type = ((sample(x, {&quot;k&quot;: x.length}) + sample(x, {&quot;k&quot;: x.length})) + ([&quot;Private&quot;] * 20));&amp;#10;    }&amp;#10;    return [block_type, learning_type, trials_type];&amp;#10;}&amp;#10;state = randint(1, 6);&amp;#10;[block_type, learning_type, trials_type] = create_trials(state);&amp;#10;actions = [&quot;a&quot;, &quot;d&quot;];&amp;#10;rewards = [1, (- 1)];&amp;#10;p1 = 0.7;&amp;#10;p2 = 0.3;&amp;#10;p_reward = {&quot;a&quot;: choice([p1, p2])};&amp;#10;p_reward[&quot;d&quot;] = (1 - p_reward[&quot;a&quot;]);&amp;#10;probs_a = [p_reward[&quot;a&quot;], (1 - p_reward[&quot;a&quot;])];&amp;#10;probs_d = [p_reward[&quot;d&quot;], (1 - p_reward[&quot;d&quot;])];&amp;#10;if ((p_reward[&quot;a&quot;] &gt; p_reward[&quot;d&quot;])) {&amp;#10;    best_action = &quot;a&quot;;&amp;#10;    worst_action = &quot;d&quot;;&amp;#10;} else {&amp;#10;    best_action = &quot;d&quot;;&amp;#10;    worst_action = &quot;a&quot;;&amp;#10;}&amp;#10;class MultinomialReward {&amp;#10;    constructor(rewards, probs) {&amp;#10;        this.rewards = rewards;&amp;#10;        this.probs = probs;&amp;#10;    }&amp;#10;    get_reward() {&amp;#10;        return choices(this.rewards, {&quot;weights&quot;: this.probs, &quot;k&quot;: 1})[0];&amp;#10;    }&amp;#10;}&amp;#10;reward_a = new MultinomialReward(rewards, probs_a);&amp;#10;reward_d = new MultinomialReward(rewards, probs_d);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="trial = (trial + 1);&amp;#10;blc_type = block_type[(trial - 1)];&amp;#10;lrn_type = learning_type[(trial - 1)];&amp;#10;trial_type = trials_type[(trial - 1)];&amp;#10;image_paths = [&quot;images/Observational_trial.png&quot;, &quot;images/Private_trial.png&quot;];&amp;#10;image_path = ((&quot;images/&quot; + trial_type) + &quot;_trial.png&quot;);&amp;#10;if ((trial_type === &quot;Observational&quot;)) {&amp;#10;    x_image = (- 0.5);&amp;#10;    identity = &quot;Demonstrator&quot;;&amp;#10;} else {&amp;#10;    x_image = 0.5;&amp;#10;    identity = &quot;You&quot;;&amp;#10;}&amp;#10;action = &quot;NA&quot;;&amp;#10;if ((trial_type === &quot;Observational&quot;)) {&amp;#10;    if ((lrn_type === &quot;SD&quot;)) {&amp;#10;        action = choices([best_action, worst_action], {&quot;weights&quot;: [0.8, 0.2], &quot;k&quot;: 1})[0];&amp;#10;    } else {&amp;#10;        if ((lrn_type === &quot;UD&quot;)) {&amp;#10;            action = choices([best_action, worst_action], {&quot;weights&quot;: [0.2, 0.8], &quot;k&quot;: 1})[0];&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;thisExp.addData(&quot;block_type&quot;, blc_type);&amp;#10;thisExp.addData(&quot;learning_type&quot;, lrn_type);&amp;#10;thisExp.addData(&quot;trial_type&quot;, trial_type);&amp;#10;thisExp.addData(&quot;image_path&quot;, image_path);&amp;#10;thisExp.addData(&quot;x_image&quot;, x_image);&amp;#10;thisExp.addData(&quot;trial&quot;, trial);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="trial = trial + 1&amp;#10;blc_type = block_type[trial-1]&amp;#10;lrn_type = learning_type[trial-1]&amp;#10;trial_type = trials_type[trial-1]&amp;#10;image_paths = [&quot;images/Observational_trial.png&quot;,&quot;images/Private_trial.png&quot;]&amp;#10;image_path = &quot;images/&quot; + trial_type + &quot;_trial.png&quot; &amp;#10;if trial_type == &quot;Observational&quot;:&amp;#10;    x_image = -0.5&amp;#10;    identity = &quot;Demonstrator&quot;&amp;#10;else : &amp;#10;    x_image = 0.5&amp;#10;    identity = &quot;You&quot;&amp;#10;    &amp;#10;action = 'NA'&amp;#10;if trial_type == &quot;Observational&quot;:&amp;#10;    if lrn_type == &quot;SD&quot;:&amp;#10;        action = choices([best_action, worst_action], weights = [0.8,0.2], k = 1)[0]&amp;#10;    elif lrn_type == &quot;UD&quot;:&amp;#10;        action = choices([best_action, worst_action], weights = [0.2,0.8], k = 1)[0]&amp;#10;# store in the data:&amp;#10;thisExp.addData('block_type', blc_type)&amp;#10;thisExp.addData('learning_type', lrn_type)&amp;#10;thisExp.addData('trial_type', trial_type)&amp;#10;thisExp.addData('image_path', image_path)&amp;#10;thisExp.addData('x_image', x_image)&amp;#10;thisExp.addData('trial', trial)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="person">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$image_path" valType="file"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="" valType="str"/>
        <Param name="name" updates="None" val="person" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, 0.1)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.4, 0.4)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="num"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, -0.2)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.5" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.25" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A  or  D" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image,-0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.25" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="GO!" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'a','d'" valType="list"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.75" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, -0.2)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="3.25" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$&quot;action: &quot; + str(action)" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <PolygonComponent name="line">
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="fillColor" updates="constant" val="black" valType="color"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="black" valType="color"/>
        <Param name="lineWidth" updates="constant" val="2" valType="num"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="line" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="90" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="line" valType="str"/>
        <Param name="size" updates="constant" val="(0.7, 0.7)" valType="list"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="num"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="num"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="set every repeat" val="(x_image, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="num"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="num"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="num"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$identity" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Start"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Private_Observational_trial"/>
    <Routine name="feedback"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
